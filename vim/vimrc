"

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

if empty(glob('$HOME/.vim/autoload/plug.vim'))
    silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('$HOME/.config/vim/plugged')

" Gruvbox colorscheme
Plug 'morhetz/gruvbox'

" Pretty status bar
Plug 'vim-airline/vim-airline'

" Language packs
Plug 'sheerun/vim-polyglot'

" Fuzzy finding
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" The sensible settings
Plug 'tpope/vim-sensible'

" easy commenting motions
Plug 'tpope/vim-commentary'

" mappings to easily delete, change and add such surroundings in pairs, such as quotes, parens, etc.
Plug 'tpope/vim-surround'

" enables repeating other supported plugins with the . command
Plug 'tpope/vim-repeat'

" Multiple cursor edits
Plug 'terryma/vim-multiple-cursors'

" Auto completions
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif

call plug#end()

" let g:deoplete#enable_at_startup = 1

" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
syntax on

" C++ no indention on namespaces
set cino+=N-s
" C++ remove indent from public/private keyword
set cino+=g-s

" Set space as new mapleader
let mapleader=" "

"
" Must have options
"

" The 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Better command-line completion
set wildmenu
set wildmode=list:longest,full

" Show partial commands in the last line of the screen
set showcmd

" setting search colors
" GUI
hi Search guibg=yellow guifg=black
" Term
hi Search cterm=NONE ctermbg=yellow ctermfg=black
" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Incremental search. Highlights as search is typed
set incsearch

" Modelines have historically been a source of security vulnerabilities.
" set nomodeline
set noshowmode

"
" Usability options
"

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Highlight at column 132
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%133v', 100)

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Sane splitting defaults
set splitbelow splitright

"
" Visualization
"

" Display line numbers on the left
set number relativenumber

" Display whitespace characters that should not be there
set list
set listchars=tab:>~,nbsp:_,trail:.

" Do not set the | in vertical splits
set fillchars=vert:\ ,fold:-

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>
if system('uname -s') == "Darwin\n"
    set clipboard=unnamed "OSX
else
    set clipboard=unnamedplus "Linux
endif

" Set directory for where to put swap files
set dir=/tmp/
set viminfo+=n$HOME/.config/vim/viminfo

" Searching for files
set path+=**

"
" Spelling options
"
" On markdown files
autocmd BufRead,BufNewFile *.md setlocal spell

" On git commits
autocmd FileType gitcommit setlocal spell

" Enable autocomplete spelling when spelling is enabled
set complete+=kspell

hi clear SpellBad
hi SpellBad cterm=undercurl ctermfg=red

"
" File syntax
"

autocmd BufRead,BufNewFile dockerfile set ft=Dockerfile
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s


"
" Indentation options
"

" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

"
" Mappings
"

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Visual select line similar to yy, dd, and cc
nnoremap vv 0v$

" Show current folder as sidebar
nnoremap <leader>e :Lex <bar> :vertical resize 50<CR>
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" Vertical split
nnoremap <leader>v :vsplit<CR>
" Horizontal split
nnoremap <leader>s :split<CR>

" fzf mappings
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffer<CR>
nnoremap <leader>t :Tags<CR>

" Remap ; to : in normal mode
nnoremap ; :

" Open file under curser in new tab
nnoremap <leader>gf <c-w>gf<CR>

" Open terminal vsplit
nnoremap <leader>gt :vert term<CR>

" Ctags and tags related settings
" au BufWritePost *.c,*.cpp,*.h silent! !ctags -R --extra="+f" -f .git/tags . &
" set tags+=.git/tags
" set notagrelative

" Moving lines up and down
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" set statusline=
" " set statusline+=%{StatuslineGit()}
" set statusline+=%#StatusLine#
" set statusline+=\ %f
" set statusline+=%m
" " Align right from here
" set statusline+=%=
" set statusline+=\ %y
" set statusline+=\ %l:%c
" set statusline+=\ %p%%
" set statusline+=\ 

colorscheme gruvbox

" EOF
